// this file was generated by Magic.Runtime.Callsites -- do not edit it by hand!
using System;
using System.Reflection;

namespace Magic
{
    public class CallsiteConstructor07<T>
    {
        CallSiteCache07 cache;

        public CallsiteConstructor07()
        {
            cache = new CallSiteCache07();
        }

        public T Invoke(object arg0,object arg1,object arg2,object arg3,object arg4,object arg5,object arg6)
        {
            if(cache.TryGet(arg0,arg1,arg2,arg3,arg4,arg5,arg6, out var result))
                return (T)result(arg0,arg1,arg2,arg3,arg4,arg5,arg6);

            var ctor = Dispatch.BindToConstructor(typeof(T), new [] { arg0,arg1,arg2,arg3,arg4,arg5,arg6 });
            if (ctor != null)
            {
                cache.CacheMethod(arg0,arg1,arg2,arg3,arg4,arg5,arg6, DelegateHelpers.GetMethodDelegate07(ctor));
                var args = new[] { arg0,arg1,arg2,arg3,arg4,arg5,arg6 };
                Binder.Shared.ConvertArguments(ctor, args);
                return (T)Dispatch.InvokeUnwrappingExceptions(ctor, null, args);
            }
            throw new ArgumentException($"Could not invoke constructor `{typeof(T)}` with types {arg0.GetType()}, {arg1.GetType()}, {arg2.GetType()}, {arg3.GetType()}, {arg4.GetType()}, {arg5.GetType()}, {arg6.GetType()}.");
        }
    }
}