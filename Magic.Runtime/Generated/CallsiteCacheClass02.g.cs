// this file was generated by Magic.Runtime.Callsites -- do not edit it by hand!
using System;

namespace Magic
{
    public class CallSiteCache02
    {
        struct Signature
        {
            Type type0;
            Type type1;
            
            public Signature(object arg0,object arg1)
            {
                type0 = arg0.GetType();
                type1 = arg1.GetType();
            }

            public bool Match(object arg0,object arg1)
            {
                return type0 == arg0.GetType() && type1 == arg1.GetType();
            }
        }

        struct Entry
        {
            public Signature Signature;
            public CallsiteFunc<object, object, object> Function;
        }
        int cacheSize;
        int count = 0;

        // l0l1Cache[0] is l0 cache, first entry checked
        // l0l1Cache[1..cacheSize] is l1 cache, looped through to find best match
        Entry[] l0l1Cache;

        public CallSiteCache02(int cacheSize)
        {
            this.cacheSize = cacheSize;
            l0l1Cache = new Entry[cacheSize];
        }

        public CallSiteCache02()
        {
            this.cacheSize = 9;
            l0l1Cache = new Entry[cacheSize];
        }

        public void CacheMethod(object arg0, object arg1, CallsiteFunc<object, object, object> func)
        {
            var c = count < cacheSize ? count++ : count - 1;
            l0l1Cache[c] = new Entry { Signature = new Signature(arg0,arg1), Function = func };
            // CacheSwap(0, c);
            var temp = l0l1Cache[c];
            l0l1Cache[c] = l0l1Cache[0];
            l0l1Cache[0] = temp;
        }

        public bool TryGet(object arg0, object arg1, out CallsiteFunc<object, object, object> result)
        {
            var sig0 = l0l1Cache[0].Signature;
            var func0 = l0l1Cache[0].Function;
            if (sig0.Match(arg0,arg1))
            {
                result = func0;
                return true;
            }
            for (var i = 0; i < count; i++)
            {
                var sig = l0l1Cache[i].Signature;
                var func = l0l1Cache[i].Function;
                if (sig.Match(arg0,arg1))
                {
                    // CacheSwap(0, i);
                    var temp = l0l1Cache[i];
                    l0l1Cache[i] = l0l1Cache[0];
                    l0l1Cache[0] = temp;
                    result = func;
                    return true;
                }
            }
            result = default;
            return false;
        }
    }
}