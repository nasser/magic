// this file was generated by Magic.Runtime.Callsites -- do not edit it by hand!
using System;
using System.Reflection;

namespace Magic
{
    public static partial class DelegateHelpers
    {
        public static CallsiteFunc<object, object, object> GetMethodDelegate02(MethodBase method)
        {
            var returnType = ((MethodInfo)method).ReturnType;
            if(returnType == typeof(void))
                returnType = typeof(object);
            var getDelegateOpenGenerics = typeof(DelegateHelpers).GetMethod(nameof(GetMethodDelegateFast02), BindingFlags.Public | BindingFlags.Static);
            MethodInfo getDelegateClosedGenerics = null;
            if (method.IsStatic)
            {
                getDelegateClosedGenerics = getDelegateOpenGenerics.MakeGenericMethod(method.GetParameters()[0].ParameterType,method.GetParameters()[1].ParameterType,returnType);
            }
            else
            {
                getDelegateClosedGenerics = getDelegateOpenGenerics.MakeGenericMethod(method.DeclaringType, method.GetParameters()[0].ParameterType,returnType);
            }
            return (CallsiteFunc<object, object, object>)getDelegateClosedGenerics.Invoke(null, new object[] { method });
        }

        public static CallsiteFunc<object, object, object> GetMethodDelegateFast02<T0,T1,T2>(MethodInfo method)
        {
            if(!method.IsStatic && method.DeclaringType.IsValueType)
            {
                if(method.ReturnType == typeof(void))
                {
                    var f = (CallsiteActionRef<T0,T1>)Delegate.CreateDelegate(typeof(CallsiteActionRef<T0,T1>), method);
                    return (arg0,arg1) => {
                        var target = (T0)arg0;
                        f(ref target,(T1)arg1);
                        return null;
                    };
                }
                else
                {
                    var f = (CallsiteFuncRef<T0,T1,T2>)Delegate.CreateDelegate(typeof(CallsiteFuncRef<T0,T1,T2>), method);
                    return (arg0,arg1) => {
                        var target = (T0)arg0;
                        return f(ref target,(T1)arg1);
                    };
                }
            }
            else
            {
                if(method.ReturnType == typeof(void))
                {
                    var f = (CallsiteAction<T0,T1>)Delegate.CreateDelegate(typeof(CallsiteAction<T0,T1>), method);
                    return (arg0,arg1) => {
                        f((T0)arg0,(T1)arg1);
                        return null;
                    };
                }
                else
                {
                    var f = (CallsiteFunc<T0,T1,T2>)Delegate.CreateDelegate(typeof(CallsiteFunc<T0,T1,T2>), method);
                    return (arg0,arg1) => f((T0)arg0,(T1)arg1);
                }
            }
        }

        public static CallsiteFunc<object, object, object> GetMethodDelegateSlow02(MethodBase method)
        {
            CallsiteFunc<object, object, object> ret;
            if(method.IsStatic)
                ret = (arg0,arg1) => 
                {
                    var args = new[] { arg0,arg1 };
                    Binder.Shared.ConvertArguments(method, args);
                    return method.Invoke(null, args);
                };
            else if(method.IsConstructor)
                ret = (arg0,arg1) => 
                {
                    var ctor = method as ConstructorInfo;
                    var args = new[] { arg0,arg1 };
                    Binder.Shared.ConvertArguments(ctor, args);
                    return ctor.Invoke(args);
                };
            else
                ret = (target, arg1) => 
                {
                    var args = new [] { arg1 };
                    Binder.Shared.ConvertArguments(method, args);
                    return method.Invoke(target, args);
                };
            return ret;
        }

    }
}