// this file was generated by Magic.Runtime.Callsites -- do not edit it by hand!
using System;
using System.Reflection;

namespace Magic
{
    public class CallsiteConstructor{{arityPadded}}<T>
    {
        CallSiteCache{{arityPadded}} cache;

        public CallsiteConstructor{{arityPadded}}()
        {
            cache = new CallSiteCache{{arityPadded}}();
        }

        public T Invoke({{#subscripts}}object arg{{.}},{{/subscripts}})
        {
            if(cache.TryGet({{#subscripts}}arg{{.}},{{/subscripts}} out var result))
                return (T)result({{#subscripts}}arg{{.}},{{/subscripts}});

            var ctor = Dispatch.BindToConstructor(typeof(T), new [] { {{#subscripts}}arg{{.}},{{/subscripts}} });
            if (ctor != null)
            {
                cache.CacheMethod({{#subscripts}}arg{{.}},{{/subscripts}} DelegateHelpers.GetMethodDelegate{{arityPadded}}(ctor));
                var args = new[] { {{#subscripts}}arg{{.}},{{/subscripts}} };
                Binder.Shared.ConvertArguments(ctor, args);
                return (T)Dispatch.InvokeUnwrappingExceptions(ctor, null, args);
            }
            throw new ArgumentException($"Could not invoke constructor `{typeof(T)}` with types{{#subscripts}} {arg{{.}}.GetType()},{{/subscripts}}.");
        }
    }
}