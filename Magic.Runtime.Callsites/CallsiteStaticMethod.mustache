// this file was generated by Magic.Runtime.Callsites -- do not edit it by hand!
using System;
using System.Reflection;

namespace Magic
{
    public class CallsiteStaticMethod{{arityPadded}}
    {
        Type Target;
        string MemberName;
        CallSiteCache{{arityPadded}} cache;

        public CallsiteStaticMethod{{arityPadded}}(Type target, string memberName)
        {
            Target = target;
            MemberName = memberName;
            cache = new CallSiteCache{{arityPadded}}();
        }

        public object Invoke({{#subscripts}}object arg{{.}},{{/subscripts}})
        {
            if(cache.TryGet({{#subscripts}}arg{{.}},{{/subscripts}} out var result))
                return result({{#subscripts}}arg{{.}},{{/subscripts}});

            var method = Dispatch.BindToMethod(BindingFlags.Public | BindingFlags.Instance, Target, MemberName, new [] { {{#subscripts}}arg{{.}},{{/subscripts}} });
            if (method != null)
            {
                cache.CacheMethod({{#subscripts}}arg{{.}},{{/subscripts}} DelegateHelpers.GetMethodDelegate{{arityPadded}}(method));
                var args = new[] { {{#subscripts}}arg{{.}},{{/subscripts}} };
                Binder.Shared.ConvertArguments(method, args);
                return Dispatch.InvokeUnwrappingExceptions(method, null, args);
            }
            throw new ArgumentException($"Could not invoke static method `{MemberName}` on type {Target} with argument types{{#subscripts}} {arg{{.}}.GetType()},{{/subscripts}}.");
        }
    }
}