// this file was generated by Magic.Runtime.Callsites -- do not edit it by hand!
using System;
using System.Reflection;

namespace Magic
{
    public static partial class DelegateHelpers
    {
        public static CallsiteFunc<object{{#subscripts}}, object{{/subscripts}}> GetMethodDelegate{{arityPadded}}(MethodBase method)
        {
            if(method.IsConstructor)
                return GetMethodDelegateSlow{{arityPadded}}(method);
            var returnType = ((MethodInfo)method).ReturnType;
            if(returnType == typeof(void))
                returnType = typeof(object);
            var getDelegateOpenGenerics = typeof(DelegateHelpers).GetMethod(nameof(GetMethodDelegateFast{{arityPadded}}), BindingFlags.Public | BindingFlags.Static);
            MethodInfo getDelegateClosedGenerics = null;
            if (method.IsStatic)
            {
                getDelegateClosedGenerics = getDelegateOpenGenerics.MakeGenericMethod({{#subscripts}}method.GetParameters()[{{.}}].ParameterType,{{/subscripts}}returnType);
            }
            else
            {
                getDelegateClosedGenerics = getDelegateOpenGenerics.MakeGenericMethod(method.DeclaringType, {{#subscriptsMinusOne}}method.GetParameters()[{{.}}].ParameterType,{{/subscriptsMinusOne}}returnType);
            }
            return (CallsiteFunc<object{{#subscripts}}, object{{/subscripts}}>)getDelegateClosedGenerics.Invoke(null, new object[] { method });
        }

        public static CallsiteFunc<object{{#subscripts}}, object{{/subscripts}}> GetMethodDelegateFast{{arityPadded}}<{{#subscriptsPlusOne}}T{{.}},{{/subscriptsPlusOne}}>(MethodInfo method)
        {
            if(!method.IsStatic && method.DeclaringType.IsValueType)
            {
                if(method.ReturnType == typeof(void))
                {
                    var f = (CallsiteActionRef<{{#subscripts}}T{{.}},{{/subscripts}}>)Delegate.CreateDelegate(typeof(CallsiteActionRef<{{#subscripts}}T{{.}},{{/subscripts}}>), method);
                    return ({{#subscripts}}arg{{.}},{{/subscripts}}) => {
                        var target = (T0)arg0;
                        f(ref target,{{#subscriptsSkipOne}}(T{{.}})arg{{.}},{{/subscriptsSkipOne}});
                        return null;
                    };
                }
                else
                {
                    var f = (CallsiteFuncRef<{{#subscriptsPlusOne}}T{{.}},{{/subscriptsPlusOne}}>)Delegate.CreateDelegate(typeof(CallsiteFuncRef<{{#subscriptsPlusOne}}T{{.}},{{/subscriptsPlusOne}}>), method);
                    return ({{#subscripts}}arg{{.}},{{/subscripts}}) => {
                        var target = (T0)arg0;
                        return f(ref target,{{#subscriptsSkipOne}}(T{{.}})arg{{.}},{{/subscriptsSkipOne}});
                    };
                }
            }
            else
            {
                if(method.ReturnType == typeof(void))
                {
                    var f = (CallsiteAction<{{#subscripts}}T{{.}},{{/subscripts}}>)Delegate.CreateDelegate(typeof(CallsiteAction<{{#subscripts}}T{{.}},{{/subscripts}}>), method);
                    return ({{#subscripts}}arg{{.}},{{/subscripts}}) => {
                        f({{#subscripts}}(T{{.}})arg{{.}},{{/subscripts}});
                        return null;
                    };
                }
                else
                {
                    var f = (CallsiteFunc<{{#subscriptsPlusOne}}T{{.}},{{/subscriptsPlusOne}}>)Delegate.CreateDelegate(typeof(CallsiteFunc<{{#subscriptsPlusOne}}T{{.}},{{/subscriptsPlusOne}}>), method);
                    return ({{#subscripts}}arg{{.}},{{/subscripts}}) => f({{#subscripts}}(T{{.}})arg{{.}},{{/subscripts}});
                }
            }
        }

        public static CallsiteFunc<object{{#subscripts}}, object{{/subscripts}}> GetMethodDelegateSlow{{arityPadded}}(MethodBase method)
        {
            CallsiteFunc<object{{#subscripts}}, object{{/subscripts}}> ret;
            if(method.IsStatic)
                ret = ({{#subscripts}}arg{{.}},{{/subscripts}}) => 
                {
                    var args = new[] { {{#subscripts}}arg{{.}},{{/subscripts}} };
                    Binder.Shared.ConvertArguments(method, args);
                    return method.Invoke(null, args);
                };
            else if(method.IsConstructor)
                ret = ({{#subscripts}}arg{{.}},{{/subscripts}}) => 
                {
                    var ctor = method as ConstructorInfo;
                    var args = new[] { {{#subscripts}}arg{{.}},{{/subscripts}} };
                    Binder.Shared.ConvertArguments(ctor, args);
                    return ctor.Invoke(args);
                };
            else
                ret = (target{{#subscriptsSkipOne}}, arg{{.}}{{/subscriptsSkipOne}}) => 
                {
                    {{^subscriptsSkipOne}}
                    return method.Invoke(target, null);
                    {{/subscriptsSkipOne}}
                    {{#subscriptsSkipOne.Length}}
                    var args = new [] { {{#subscriptsSkipOne}}arg{{.}},{{/subscriptsSkipOne}} };
                    Binder.Shared.ConvertArguments(method, args);
                    return method.Invoke(target, args);
                    {{/subscriptsSkipOne.Length}}
                };
            return ret;
        }

    }
}